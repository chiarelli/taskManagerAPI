#!/bin/bash

# Caminho dos diret√≥rios monitorados
WATCH_DIRS="domain application infra"
PRESENTATION_MODULE="presentation"

# Arquivo tempor√°rio com lista dos arquivos para o entr
TMP_FILE_LIST=$(mktemp)

# Encontra todos os arquivos fonte relevantes
find $WATCH_DIRS -type f \( -name "*.java" -o -name "*.xml" \) > "$TMP_FILE_LIST"

# PID do processo spring-boot:run
SPRING_PID=0

# Fun√ß√£o para iniciar a aplica√ß√£o
start_spring() {
  echo -e "\n‚û°Ô∏è  Iniciando aplica√ß√£o Spring Boot..."
  mvn -pl $PRESENTATION_MODULE spring-boot:run &
  SPRING_PID=$!
  echo "‚úÖ Aplica√ß√£o rodando com PID $SPRING_PID"
}

# Fun√ß√£o para parar a aplica√ß√£o
stop_spring() {
  if [[ $SPRING_PID -ne 0 ]]; then
    echo "‚õî Encerrando aplica√ß√£o Spring Boot (PID $SPRING_PID)..."
    kill -TERM "$SPRING_PID"
    wait "$SPRING_PID" 2>/dev/null
    SPRING_PID=0
  fi
}

# Fun√ß√£o para recompilar m√≥dulos dependentes
recompile_modules() {
  echo -e "\nüîÑ Recompilando m√≥dulos domain, application e infra..."
  mvn compile -pl domain,application,infra -am
}

# Tratamento de encerramento ao sair do script
cleanup() {
  echo -e "\nüßπ Encerrando script..."
  stop_spring
  rm -f "$TMP_FILE_LIST"
  exit 0
}
trap cleanup INT TERM

# Inicia a aplica√ß√£o pela primeira vez
start_spring

# Come√ßa o monitoramento com entr
echo -e "\nüëÅÔ∏è  Monitorando altera√ß√µes em: $WATCH_DIRS"
echo "(Pressione Ctrl+C para sair)\n"

cat "$TMP_FILE_LIST" | entr -r bash -c '
  echo -e "\nüìù Altera√ß√µes detectadas."
  echo "----------------------------------------"
  echo "üîß Compilando os m√≥dulos alterados..."
  if mvn compile -pl domain,application,infra -am; then
    echo "‚úÖ Compila√ß√£o bem-sucedida."
    echo "üîÅ Reiniciando aplica√ß√£o Spring Boot..."
    kill -TERM '"$SPRING_PID"' && wait '"$SPRING_PID"' 2>/dev/null
    mvn -pl '"$PRESENTATION_MODULE"' spring-boot:run &
    SPRING_PID=$!
    echo "‚úÖ Aplica√ß√£o reiniciada com PID $SPRING_PID"
  else
    echo "‚ùå Falha na compila√ß√£o. Aplica√ß√£o n√£o foi reiniciada."
  fi
'

